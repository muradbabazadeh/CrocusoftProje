// <auto-generated />
using System;
using CrocusoftProje.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrocusoftProje.Infrastructure.Migrations.Migrations
{
    [DbContext(typeof(CrocusoftProjeDbContext))]
    [Migration("20210211140918_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.PermissionAggregate.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.PermissionAggregate.PermissionParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionParameter");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.RoleAggregate.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.RoleAggregate.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissons");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.RoleAggregate.RolePermissionParameterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionParameterId")
                        .HasColumnType("int");

                    b.Property<int>("RolePermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionParameterId");

                    b.HasIndex("RolePermissionId");

                    b.ToTable("RolePermissionParameterValue");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForcePasswordChange")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastPasswordChangeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.UserAggregate.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermisson");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.UserAggregate.UserPermissionParameterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionParameterId")
                        .HasColumnType("int");

                    b.Property<int?>("UserPermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionParameterId");

                    b.HasIndex("UserPermissionId");

                    b.ToTable("UserPermissionParameterValue");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.UserAggregate.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.PermissionAggregate.PermissionParameter", b =>
                {
                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.PermissionAggregate.Permission", null)
                        .WithMany("Parameters")
                        .HasForeignKey("PermissionId");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.RoleAggregate.RolePermission", b =>
                {
                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.PermissionAggregate.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.RoleAggregate.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.RoleAggregate.RolePermissionParameterValue", b =>
                {
                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.PermissionAggregate.PermissionParameter", "PermissionParameter")
                        .WithMany()
                        .HasForeignKey("PermissionParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.RoleAggregate.RolePermission", null)
                        .WithMany("ParameterValues")
                        .HasForeignKey("RolePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionParameter");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.UserAggregate.UserPermission", b =>
                {
                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.PermissionAggregate.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.UserAggregate.User", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.UserAggregate.UserPermissionParameterValue", b =>
                {
                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.PermissionAggregate.PermissionParameter", "PermissionParameter")
                        .WithMany()
                        .HasForeignKey("PermissionParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.UserAggregate.UserPermission", null)
                        .WithMany("ParameterValues")
                        .HasForeignKey("UserPermissionId");

                    b.Navigation("PermissionParameter");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.UserAggregate.UserRole", b =>
                {
                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.RoleAggregate.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("CrocusoftProje.Domain.AggregatesModel.UserAggregate.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.PermissionAggregate.Permission", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.RoleAggregate.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.RoleAggregate.RolePermission", b =>
                {
                    b.Navigation("ParameterValues");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CrocusoftProje.Domain.AggregatesModel.UserAggregate.UserPermission", b =>
                {
                    b.Navigation("ParameterValues");
                });
#pragma warning restore 612, 618
        }
    }
}
